!function (a, b, c, d) { function e(b, c) { this.element = b, this.options = a.extend({}, h, c), this._defaults = h, this._name = g, this._loader = null, this.init() } function f() { a[g] || (a.isLoading = function (b) { a("body").isLoading(b) }) } var g = "isLoading", h = { position: "right", text: "", class: "icon-refresh", tpl: '<span class="isloading-wrapper %wrapper%">%text%<i class="%class% icon-spin"></i></span>', disableSource: !0, disableOthers: [] }; e.prototype = { init: function () { a(this.element).is("body") && (this.options.position = "overlay"), this.show() }, show: function () { var c = this, d = c.options.tpl.replace("%wrapper%", " isloading-show  isloading-" + c.options.position); switch (d = d.replace("%class%", c.options.class), d = d.replace("%text%", "" !== c.options.text ? c.options.text + " " : ""), c._loader = a(d), a(c.element).is("input, textarea") && !0 === c.options.disableSource ? a(c.element).attr("disabled", "disabled") : !0 === c.options.disableSource && a(c.element).addClass("disabled"), c.options.position) { case "inside": a(c.element).html(c._loader); break; case "overlay": var e = null; if (a(c.element).is("body")) e = a('<div class="isloading-overlay" style="position:fixed; left:0; top:0; z-index: 10000; background: rgba(0,0,0,0.5); width: 100%; height: ' + a(b).height() + 'px;" />'), a("body").prepend(e), a(b).on("resize", function () { e.height(a(b).height() + "px"), c._loader.css({ top: a(b).height() / 2 - c._loader.outerHeight() / 2 + "px" }) }); else { var f = a(c.element).css("position"), g = {}, h = a(c.element).outerHeight() + "px", i = "100%"; g = "relative" === f || "absolute" === f ? { top: 0, left: 0 } : a(c.element).position(), e = a('<div class="isloading-overlay" style="position:absolute; top: ' + g.top + "px; left: " + g.left + "px; z-index: 10000; background: rgba(0,0,0,0.5); width: " + i + "; height: " + h + ';" />'), a(c.element).prepend(e), a(b).on("resize", function () { e.height(a(c.element).outerHeight() + "px"), c._loader.css({ top: e.outerHeight() / 2 - c._loader.outerHeight() / 2 + "px" }) }) } e.html(c._loader), c._loader.css({ top: e.outerHeight() / 2 - c._loader.outerHeight() / 2 + "px" }); break; default: a(c.element).after(c._loader) } c.disableOthers() }, hide: function () { "overlay" === this.options.position ? a(this.element).find(".isloading-overlay").first().remove() : (a(this._loader).remove(), a(this.element).text(a(this.element).attr("data-isloading-label"))), a(this.element).removeAttr("disabled").removeClass("disabled"), this.enableOthers() }, disableOthers: function () { a.each(this.options.disableOthers, function (b, c) { var d = a(c); d.is("button, input, textarea") ? d.attr("disabled", "disabled") : d.addClass("disabled") }) }, enableOthers: function () { a.each(this.options.disableOthers, function (b, c) { var d = a(c); d.is("button, input, textarea") ? d.removeAttr("disabled") : d.removeClass("disabled") }) } }, a.fn[g] = function (b) { return this.each(function () { if (b && "hide" !== b || !a.data(this, "plugin_" + g)) a.data(this, "plugin_" + g, new e(this, b)); else { var c = a.data(this, "plugin_" + g); "hide" === b ? c.hide() : c.show() } }) }, f() }(jQuery, window, document);